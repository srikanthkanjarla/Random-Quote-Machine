{"version":3,"sources":["components/Header.js","components/Footer.js","components/RandomQuote.js","components/TweetButton.js","components/QuoteButton.js","components/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Footer","href","target","rel","randomQuote","props","quoteText","quoteAuthor","react_fontawesome_index_es","icon","QuoteButton","path","onTweetQuote","onClick","onGetQuote","type","Buttons","tweetPath","handleTweetQuote","handleGetQuote","components_TweetButton","src_components_QuoteButton","library","add","fab","faQuoteLeft","faSyncAlt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","backgroundImg","bind","assertThisInitialized","getRandomImage","getRandomQuote","updateQuoteData","_this2","fetch","then","src","url","imgUrl","setState","self","$","ajax","jsonp","dataType","success","response","data","length","replace","_this$state","concat","_this$state2","style","backgroundImage","components_Header","components_RandomQuote","components_Buttons","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8dc05e0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <div className=\"header-text\">\n        <span className=\"first-letter\">Q</span>\n        <span>u</span>\n        <span>o</span>\n        <span>t</span>\n        <span>e</span>\n        <span className=\"first-letter\">M</span>\n        <span>a</span>\n        <span>c</span>\n        <span>h</span>\n        <span>i</span>\n        <span>n</span>\n        <span>e</span>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>\n        View Source on{\" \"}\n        <a\n          href=\"https://github.com/srikanthkanjarla/Random-Quote-Machine\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Github\n        </a>\n      </span>\n      <span>\n        Images from{\" \"}\n        <a\n          href=\"https://unsplash.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Unsplash{\" \"}\n        </a>\n      </span>\n      <span>\n        Quotes API{\" \"}\n        <a\n          href=\"https://forismatic.com/en/api/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          forismatic\n        </a>\n      </span>\n    </footer>\n  );\n}\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./RandomQuote.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction randomQuote(props) {\n  const { quoteText, quoteAuthor } = props;\n  return (\n    <div className=\"quote\">\n      <h1 className=\"quote-text\">\n        <FontAwesomeIcon icon=\"quote-left\" /> {quoteText}\n      </h1>\n\n      <p className=\"quote-author\">-- {quoteAuthor}</p>\n    </div>\n  );\n}\nrandomQuote.propTypes = {\n  quoteText: PropTypes.string.isRequired,\n  quoteAuthor: PropTypes.string.isRequired\n};\nexport default randomQuote;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\nimport \"./TweetButton.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction QuoteButton(props) {\n  const { path, onTweetQuote } = props;\n  return (\n    <a href={path} className=\"btn btn-tweet\" onClick={onTweetQuote}>\n      <FontAwesomeIcon icon={[\"fab\", \"twitter\"]} /> Tweet\n    </a>\n  );\n}\nQuoteButton.propTypes = {\n  onTweetQuote: PropTypes.func.isRequired,\n  path: PropTypes.string.isRequired\n};\n\nexport default QuoteButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\nimport \"./QuoteButton.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction QuoteButton(props) {\n  const { onGetQuote } = props;\n  return (\n    <button type=\"button\" className=\"btn btn-quote\" onClick={onGetQuote}>\n      <FontAwesomeIcon icon=\"sync-alt\" /> New Quote\n    </button>\n  );\n}\nQuoteButton.propTypes = {\n  onGetQuote: PropTypes.func.isRequired\n};\n\nexport default QuoteButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TweetButton from \"./TweetButton\";\nimport QuoteButton from \"./QuoteButton\";\n\nfunction Buttons(props) {\n  const { tweetPath, handleTweetQuote, handleGetQuote } = props;\n  return (\n    <div className=\"btn-group\">\n      <TweetButton path={tweetPath} onTweetQuote={handleTweetQuote} />\n      <QuoteButton onGetQuote={handleGetQuote} />\n    </div>\n  );\n}\nButtons.propTypes = {\n  handleTweetQuote: PropTypes.func.isRequired,\n  handleGetQuote: PropTypes.func.isRequired,\n  tweetPath: PropTypes.string.isRequired\n};\nexport default Buttons;\n","import React from \"react\";\nimport $ from \"jquery\";\nimport \"./App.css\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { faQuoteLeft, faSyncAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport RandomQuote from \"./components/RandomQuote\";\nimport Buttons from \"./components/Buttons\";\n\nlibrary.add(fab, faQuoteLeft, faSyncAlt);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quoteText: \"\",\n      quoteAuthor: \"\",\n      backgroundImg: \"\",\n      tweetPath: \"\"\n    };\n    this.handleGetQuote = this.handleGetQuote.bind(this);\n    this.handleTweetQuote = this.handleTweetQuote.bind(this);\n    this.getRandomImage = this.getRandomImage.bind(this);\n    this.getRandomQuote = this.getRandomQuote.bind(this);\n    this.updateQuoteData = this.updateQuoteData.bind(this);\n  }\n\n  componentDidMount() {\n    this.getRandomQuote();\n    this.getRandomImage();\n  }\n\n  getRandomImage() {\n    fetch(\"https://source.unsplash.com/random/1250X600\")\n      .then(src => src.url)\n      .then(imgUrl => {\n        this.setState({\n          backgroundImg: imgUrl\n        });\n      });\n  }\n\n  getRandomQuote() {\n    const self = this;\n    $.ajax({\n      url:\n        \"https://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=jsonp&lang=en&jsonp=?\",\n      jsonp: \"callback\",\n      dataType: \"jsonp\",\n      success(response) {\n        self.updateQuoteData(response);\n      }\n    });\n  }\n\n  updateQuoteData(data) {\n    if ((data.quoteText + data.quoteAuthor).length < 278) {\n      this.setState({\n        quoteText: data.quoteText.replace(\";\", \",\"),\n        quoteAuthor: data.quoteAuthor\n      });\n    } else {\n      this.getRandomQuote();\n    }\n  }\n\n  handleGetQuote() {\n    this.getRandomQuote();\n    this.getRandomImage();\n  }\n\n  handleTweetQuote() {\n    const { quoteText, quoteAuthor } = this.state;\n    this.setState({\n      tweetPath: `https://twitter.com/intent/tweet?text=${quoteText}--${quoteAuthor}`\n    });\n  }\n\n  render() {\n    const { quoteText, quoteAuthor, backgroundImg, tweetPath } = this.state;\n    return (\n      <div className=\"app\" style={{ backgroundImage: `url(${backgroundImg})` }}>\n        <Header />\n        <div className=\"container\">\n          <div className=\"content\">\n            <RandomQuote quoteText={quoteText} quoteAuthor={quoteAuthor} />\n            <Buttons\n              tweetPath={tweetPath}\n              handleTweetQuote={this.handleTweetQuote}\n              handleGetQuote={this.handleGetQuote}\n            />\n          </div>\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}